#include "TestGENIEHelper.fcl"

process_name: GenieHelper

services:
{
  # Load the service that manages root files for histograms.
  TFileService:          { fileName: "geniehelpertest_hist.root"
                           closeFileFast: false }
  RandomNumberGenerator: {} #ART native random number generator
  scheduler:             { wantTracer: true wantSummary: true }
}

# Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  firstRun:    1000001     # Run number to use for this file
  firstSubRun: 1           # Subrun number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::geniehelpertest_nova_dk2nu
 }

 filters:
 {   
 }

 analyzers:
 {
 }

 #list the modules for this path, order matters
 simulate: [ generator ] 
 stream1:  [ out1 ] #could have multiple paths

 #things that modify the art::Event, filters and producers go here
 trigger_paths: [ simulate ] 

 #end_path are things that do not modify art::Event, 
 #includes analyzers and output modules. all items here can be run simultaneously 
 end_paths:     [ stream1 ]
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   #default file name, can override from command line with -o or --output
   fileName:    "geniehelpertest.root" 
   SelectEvents:{ SelectEvents: [ simulate ] }
 }
}
