# nope #include "services.fcl"

#include "AddGenieEventsToArt.fcl"
#include "GenieOutput.fcl"

process_name:  DumpGenieInfo

services:
{
  # Load the service that manages root files for histograms.
  TFileService:          { fileName: "dumpgenieinfo_hist.root" closeFileFast: false }
  RandomNumberGenerator: {} #ART native random number generator
  scheduler:             { wantTracer: true wantSummary: true }

  # IFDH:          {IFDH_BASE_URI:  "http://samweb.fnal.gov:8480/sam/nova/api"}
  # nope  @table::standard_services
}

# Read from an existing file
source:
{
  module_type: RootInput
  maxEvents:   -1
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  producers:
  {
    # when fetched from file by dump module they'll come back
    # ordered alphabetically by label, so for convenience put
    # them in in that order (easing comparisons)
  }

  analyzers:
  {
    outputgenie:  @local::standard_genie_output
  }

  simulate: [ ]
  stream1:  [ outputgenie, out1 ]

  trigger_paths:   [ ]   ##  simulate ]
  end_paths:       [ stream1 ]

}

outputs:
{
  out1:
  {
    module_type:  RootOutput
    fileName:     "addgenie.root"   # default name, override w/ -o --output
    ##  SelectEvents:  { SelectEvents: [ simulate ] }
  }
}

physics.analyzers.outputgenie.dumpFilePattern:  "std::cout"

#physics.analyzers.outputgenie.dumpMCTruth:  true
#physics.analyzers.outputgenie.dumpGTruth:   true
#physics.analyzers.outputgenie.dumpMCFlux:   true
