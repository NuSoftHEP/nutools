########################################################################
# Distribution build configuration for @DIST_BUILD_SPEC@
#
#   Build the Nu-Lite-base supporting distribution.
########################################################################

basequal=${1}

# Special requirements on buildFW version for modern Cetmodules and MRB.
if version_greater $(latest_version @CETMODULES_VERSION_LIST@) v3_02_99 ||
    version_greater @MRB_VERSION@ v5_99_99; then
  @DEFINE_REQUIRE_BUILDFW_VERSION@
  require_buildfw_version 6.00.00 || return
fi

# Specify version to bootstrap and setup UPS.
check_ups @UPS_VERSION@

# initialize spack
init_spack
# # add spack packages here
add_spack_command spack install --cache-only libpng@1.6.37%gcc@4.8.5 arch=x86_64
add_spack_command spack install --cache-only libjpeg-turbo@2.1.0%gcc@4.8.5 arch=x86_64
add_spack_command spack install --cache-only giflib@5.2.1%gcc@4.8.5 arch=x86_64
add_spack_command spack module ups_version refresh -y libjpeg-turbo@2.1.0 libpng@1.6.37 giflib@5.2.1 zlib@1.2.7
add_spack_command spack module ups_table refresh -y libjpeg-turbo@2.1.0 libpng@1.6.37 giflib@5.2.1 zlib@1.2.7

# Canvas.
# If sphinx is not already available, it needs to be built separately.
SPHINX_PULL_ONLY=1
build_bundle canvas_product_stack-@CANVAS_STACK_DOT_VERSION@ ${basequal} || return

# Handle Python.
@INIT_PYQUAL_VARS@

do_build cry @CRY_VERSION@ ${basequal}

# LHAPDF.
do_build lhapdf @LHAPDF_VERSION@ ${basequal}:${pyqual}

# Geant4 depdendencies.
do_build xerces_c @XERCES_C_VERSION@ ${basequal}
do_build log4cpp @LOG4CPP_VERSION@ ${basequal}

# Add g4* datasets before building Geant4.
build_noarch g4abla       @G4ABLA_VERSION@
build_noarch g4emlow      @G4EMLOW_VERSION@
build_noarch g4incl @G4INCL_VERSION@
build_noarch g4neutron    @G4NEUTRON_VERSION@
build_noarch g4particlexs  @G4PARTICLEXS_VERSION@
build_noarch g4nucleonxs  @G4NUCLEONXS_VERSION@
build_noarch g4nuclide    @G4NUCLIDE_VERSION@
build_noarch g4photon     @G4PHOTON_VERSION@
build_noarch g4pii        @G4PII_VERSION@
build_noarch g4radiative  @G4RADIATIVE_VERSION@
build_noarch g4surface    @G4SURFACE_VERSION@
build_noarch g4tendl      @G4TENDL_VERSION@
do_build geant4 @GEANT4_VERSION@ ${basequal}

# TAUOLA C++.
build_label=${pyqual} \
  build_bundle @TAUOLA_DIST_NAME@-@TAUOLA_DIST_DOT_VERSION@ ${basequal} || return

# GENIE.
do_build genie @GENIE_VERSION@ ${basequal}${pylabel}
do_build dk2nudata @DK2NUDATA_VERSION@ ${basequal}${pylabel}
do_build dk2nugenie @DK2NUGENIE_VERSION@ ${basequal}${pylabel}

# IFDH.
# use the ifdh bundle and call it from nulite-cfg

# pygccxml and castxml
CASTXML_PULL_ONLY=1 \
  build_bundle castxml-@CASTXML_DOT_VERSION@ || return
do_build pygccxml @PYGCCXML_VERSION@ ${pyqual} 

# pycurl
do_build pycurl @PYCURL_VERSION@ ${pyqual}

# Tensorflow.
echo "check to see if we can build tensorflow on ${flvr}"
#if [[ "${flvr}" != "Linux64bit+4.15-2.27" ]] && [[ "${flvr}" != "Linux64bit+5.4-2.31" ]]; then
#  build_bundle tensorflow-@TENSORFLOW_DIST_DOT_VERSION@ ${basequal} || return
#fi

# Triton.
##build_bundle triton-@TRITON_DIST_DOT_VERSION@ ${basequal} || return

# pick up libtorch on appropriate platforms
echo "check to see if we can build libtorch on ${flvr}"
#if [[ "${flvr}" != "Linux64bit+4.15-2.27" ]] && [[ "${flvr}" != "Linux64bit+5.4-2.31" ]]; then
#  build_bundle libtorch-@LIBTORCH_DOT_VERSION@ ${basequal} || return
#fi

# Data-only packages.
# genie_phyopt v3_02_00 -q dkcharm is part of the dkcharmtau tarball!
##build_noarch genie_phyopt @GENIE_PHYOPT_VERSION@ dkcharm
build_noarch genie_phyopt @GENIE_PHYOPT_VERSION@ dkcharmtau
build_noarch genie_xsec @GENIE_XSEC_VERSION@ G1802a00000-k250-e1000
build_noarch genie_xsec @GENIE_XSEC_VERSION@ G1810a0211a-k250-e1000
build_noarch genie_xsec @GENIE_XSEC_VERSION@ G1810a0211b-k250-e1000


# Local Variables:
# mode: sh
# eval: (sh-set-shell "bash")
# End:
