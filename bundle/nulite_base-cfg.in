########################################################################
# Distribution build configuration for @DIST_BUILD_SPEC@
#
#   Build the Nu-Lite-base supporting distribution.
########################################################################

basequal=${1}

# Special requirements on buildFW version for modern Cetmodules and MRB.
if version_greater $(latest_version @CETMODULES_VERSION_LIST@) v3_02_99 ||
    version_greater @MRB_VERSION@ v5_99_99; then
  @DEFINE_REQUIRE_BUILDFW_VERSION@
  require_buildfw_version 6.00.00 || return
fi

# Specify version to bootstrap and setup UPS.
check_ups @UPS_VERSION@

# Canvas.
# If sphinx is not already available, it needs to be built separately.
SPHINX_PULL_ONLY=1
build_bundle canvas_product_stack-@CANVAS_STACK_DOT_VERSION@ ${basequal} || return

# Handle Python.
@INIT_PYQUAL_VARS@

for cv in @CMAKE_VERSION_LIST@; do
  do_build cmake ${cv}
done

do_build cry @CRY_VERSION@ ${basequal}

# LHAPDF.
do_build lhapdf @LHAPDF_VERSION@ ${basequal}:${pyqual}

# Geant4 depdendencies.
do_build xerces_c @XERCES_C_VERSION@ ${basequal}
do_build log4cpp @LOG4CPP_VERSION@ ${basequal}

# Add g4* datasets before building Geant4.
build_noarch g4abla       @G4ABLA_VERSION@
build_noarch g4emlow      @G4EMLOW_VERSION@
build_noarch g4incl @G4INCL_VERSION@
build_noarch g4neutron    @G4NEUTRON_VERSION@
build_noarch g4particlexs  @G4PARTICLEXS_VERSION@
build_noarch g4nucleonxs  @G4NUCLEONXS_VERSION@
build_noarch g4nuclide    @G4NUCLIDE_VERSION@
build_noarch g4photon     @G4PHOTON_VERSION@
build_noarch g4pii        @G4PII_VERSION@
build_noarch g4radiative  @G4RADIATIVE_VERSION@
build_noarch g4surface    @G4SURFACE_VERSION@
build_noarch g4tendl      @G4TENDL_VERSION@
do_build geant4 @GEANT4_VERSION@ ${basequal}

# TAUOLA C++.
build_label=${pyqual} \
  build_bundle @TAUOLA_DIST_NAME@-@TAUOLA_DIST_DOT_VERSION@ ${basequal} || return

# GENIE.
# build ${basequal}, ${basequal}:geant4, and maybe ${basequal}:inclxx
do_build genie @GENIE_VERSION@ ${basequal}
do_build genie @GENIE_VERSION@ ${basequal}:geant4
[ "$basequal" = c7 ] || [ "$basequal" = c14 ] ||
   ( do_build inclxx @INCLXX_VERSION@  ${basequal}
     do_build genie @GENIE_VERSION@ ${basequal}:inclxx
   )
do_build dk2nudata @DK2NUDATA_VERSION@ ${basequal}${pylabel}
do_build dk2nugenie @DK2NUGENIE_VERSION@ ${basequal}${pylabel}

# IFDH.
# use the ifdh bundle and call it from nulite-cfg
# pygccxml and castxml
CASTXML_PULL_ONLY=1 \
  build_bundle castxml-@CASTXML_DOT_VERSION@ || return
do_build pygccxml @PYGCCXML_VERSION@ ${pyqual} 

# pycurl
do_build pycurl @PYCURL_VERSION@ ${pyqual}
# protobuf and grpc
do_build abseil_cpp @ABSEIL_CPP_VERSION@ ${basequal}
do_build protobuf @PROTOBUF_VERSION@ ${basequal}
do_build grpc @GRPC_VERSION@ ${basequal}
# eigen
build_noarch eigen @EIGEN_VERSION@

# Tensorflow.
echo "check to see if we can build tensorflow on ${flvr} with -q +$basequal"
[ "$basequal" = c7 ] ||
  [ "$basequal" = c14 ] ||
  [ "$flvr" = "Linux64bit+4.15-2.27" ] ||
  [ "$flvr" = "Linux64bit+5.4-2.31" ] ||
  build_bundle tensorflow-@TENSORFLOW_DIST_DOT_VERSION@ ${basequal} || return

# Triton.
# (triton depends on grpc)
[ "$basequal" = c7 ] || build_bundle triton-@TRITON_DIST_DOT_VERSION@ ${basequal} || return

# pick up libtorch on appropriate platforms
echo "check to see if we can build libtorch on ${flvr} with -q +$basequal"
[ "$basequal" = c7 ] ||
  [ "$basequal" = c14 ] ||
  [ "$flvr" = "Linux64bit+4.15-2.27" ] ||
  [ "$flvr" = "Linux64bit+5.4-2.31" ] ||
  build_bundle libtorch-@LIBTORCH_DOT_VERSION@ $basequal ||
  return

# Data-only packages.
build_noarch genie_phyopt @GENIE_PHYOPT_VERSION@ dkcharm
build_noarch genie_phyopt @GENIE_PHYOPT_VERSION@ dkcharmtau
build_noarch genie_xsec @GENIE_XSEC_VERSION@ AR2320i00000-k250-e1000
build_noarch genie_xsec @GENIE_XSEC_VERSION@ G1802a00000-k250-e1000
build_noarch genie_xsec @GENIE_XSEC_VERSION@ G1810a0211a-k250-e1000
build_noarch genie_xsec @GENIE_XSEC_VERSION@ G1810a0211b-k250-e1000
build_noarch genie_xsec @GENIE_XSEC_VERSION@ GDNu2001a00000-k120-e200


# Local Variables:
# mode: sh
# eval: (sh-set-shell "bash")
# End:
